use ecommerce;

SELECT * FROM ecommerce.customers;
SELECT * FROM ecommerce.geolocation;
SELECT * FROM ecommerce.order_items;
SELECT * FROM ecommerce.orders;
SELECT * FROM ecommerce.payments;
SELECT * FROM ecommerce.products;
SELECT * FROM ecommerce.sellers;

-- List all unique cities where customers are located.
select distinct customer_city from customers;

-- Count the number of orders placed in 2017.
select count(order_id) from orders where year(order_purchase_timestamp) = 2017;
-- Find the total sales per category.
select products.product_category category, round(sum(payments.payment_value), 2) sales
from products join order_items 
on products.product_id = order_items.product_id
join payments
on payments.order_id = order_items.order_id
group by category;

-- Calculate the percentage of orders that were paid in installments
select (sum(case when payment_installments >= 1 then 1
else 0 end))/count(*)*100 from payments;

-- Count the number of customers from each state.
select customer_state,count(customer_id) 
from customers group by customer_state;

-- Calculate the number of orders per month in 2018.
select monthname(order_purchase_timestamp) months,
count(order_id) order_count from orders 
where year(order_purchase_timestamp) = 2018 
group by months;

-- Calculate the percentage of total revenue contributed by each product category.
select upper(products.product_category) category, 
round((sum(payments.payment_value)/(select sum(payment_value) from payments))*100,2) 
sales_percentage 
from products join order_items 
on products.product_id = order_items.product_id
join payments
on payments.order_id = order_items.order_id
group by category order by sales_percentage desc;

-- Identify the correlation between product price and the number of times a product has been purchased.
select products.product_category as category,
count(order_items.product_id) total_items,
round(avg(order_items.price),2) as order_items
from products join order_items
on products.product_id = order_items.product_id
group by category;

-- Calculate the total revenue generated by each seller, and rank them by revenue.
select * ,dense_rank() over(order by revenue desc) as rn from 
(select order_items.seller_id, sum(payments.payment_value) 
revenue from order_items join payments
on order_items.order_id = payments.order_id
group by order_items.seller_id) as a;